# This is based on ripgrep:
# https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/ci.yml

name: ci
on:
  pull_request:
  push:
    branches:
    - master
jobs:
  test:
    name: test
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS:
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build:
        - stable
        - beta
        # Our release builds are generated by a nightly compiler to take
        # advantage of the latest optimizations/compile time improvements. So
        # we test all of them here.
        - nightly
        - nightly-musl
        - nightly-32-gnu
        - nightly-32-musl
        - nightly-mips
        - nightly-arm
        - nightly-aarch
        - macos
        - win-msvc
        - win-gnu
        include:
        - build: stable
          os: ubuntu-18.04
          rust: stable
        - build: beta
          os: ubuntu-18.04
          rust: beta

        - build: nightly
          os: ubuntu-18.04
          rust: nightly

        - build: nightly-musl
          os: ubuntu-18.04
          rust: nightly
          target: x86_64-unknown-linux-musl

        - build: nightly-32-gnu
          os: ubuntu-18.04
          rust: nightly
          target: i686-unknown-linux-gnu

        - build: nightly-32-musl
          os: ubuntu-18.04
          rust: nightly
          target: i686-unknown-linux-musl

        - build: nightly-mips
          os: ubuntu-18.04
          rust: nightly
          target: mips64-unknown-linux-gnuabi64

        - build: nightly-arm
          os: ubuntu-18.04
          rust: nightly
          target: arm-unknown-linux-gnueabihf

        - build: nightly-aarch
          os: ubuntu-18.04
          rust: nightly
          target: aarch64-unknown-linux-gnu

        - build: macos
          os: macos-latest
          rust: nightly

        - build: win-msvc
          os: windows-2019
          rust: nightly

        - build: win-gnu
          os: windows-2019
          rust: nightly-x86_64-gnu
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup cmake
      uses: lukka/get-cmake@latest

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true

    - name: Use Cross
      if: matrix.target != ''
      run: |
        # FIXME: to work around bugs in latest cross release, install master.
        # See: https://github.com/rust-embedded/cross/issues/357
        cargo install --git https://github.com/rust-embedded/cross
        echo "::set-env name=CARGO::cross"
        echo "::set-env name=TARGET_FLAGS::--target ${{ matrix.target }}"
        echo "::set-env name=TARGET_DIR::./target/${{ matrix.target }}"
    - name: Show command used for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"
    - name: Build sc_extract
      run: ${{ env.CARGO }} build --verbose --all ${{ env.TARGET_FLAGS }}

    - name: Run tests
      run: ${{ env.CARGO }} test --verbose --all ${{ env.TARGET_FLAGS }}

  rustfmt:
    name: rustfmt
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        profile: minimal
        components: rustfmt
    - name: Check formatting
      run: |
        cargo fmt --all -- --check
